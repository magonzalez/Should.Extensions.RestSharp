using System.Net;
using NUnit.Framework;
using RestSharp;
using Should.Core.Exceptions;

namespace Should.Extensions.RestSharp.UnitTests.StatusCodes
{
    [TestFixture]
    public class ShouldBeClientErrorTests
    {
        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, true)]
        [TestCase(HttpStatusCode.Unauthorized, true)]
        [TestCase(HttpStatusCode.PaymentRequired, true)]
        [TestCase(HttpStatusCode.Forbidden, true)]
        [TestCase(HttpStatusCode.NotFound, true)]
        [TestCase(HttpStatusCode.MethodNotAllowed, true)]
        [TestCase(HttpStatusCode.NotAcceptable, true)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, true)]
        [TestCase(HttpStatusCode.RequestTimeout, true)]
        [TestCase(HttpStatusCode.Conflict, true)]
        [TestCase(HttpStatusCode.Gone, true)]
        [TestCase(HttpStatusCode.LengthRequired, true)]
        [TestCase(HttpStatusCode.PreconditionFailed, true)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, true)]
        [TestCase(HttpStatusCode.RequestUriTooLong, true)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, true)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, true)]
        [TestCase(HttpStatusCode.ExpectationFailed, true)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeClientErrorCheck(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeClientError());
            else
            {
                var exception = Assert.Catch(() => response.ShouldBeClientError());

                exception.ShouldNotBeNull();
                exception.ShouldImplement<AssertException>();
            }
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, true)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeBadRequest(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeBadRequest());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeBadRequest());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, true)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeUnauthorized(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeUnauthorized());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeUnauthorized());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, true)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBePaymentRequired(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBePaymentRequired());
            else
                Assert.Throws<EqualException>(() => response.ShouldBePaymentRequired());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, true)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeForbidden(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeForbidden());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeForbidden());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, true)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeNotFound(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeNotFound());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeNotFound());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, true)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeMethodNotAllowed(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeMethodNotAllowed());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeMethodNotAllowed());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, true)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeNotAcceptable(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeNotAcceptable());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeNotAcceptable());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, true)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeProxyAuthenticationRequired(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeProxyAuthenticationRequired());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeProxyAuthenticationRequired());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, true)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeRequestTimeout(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeRequestTimeout());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeRequestTimeout());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, true)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeConflict(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeConflict());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeConflict());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, true)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeGone(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeGone());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeGone());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, true)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeLengthRequired(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeLengthRequired());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeLengthRequired());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, true)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBePreconditionFailed(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBePreconditionFailed());
            else
                Assert.Throws<EqualException>(() => response.ShouldBePreconditionFailed());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, true)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeRequestEntityTooLarge(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeRequestEntityTooLarge());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeRequestEntityTooLarge());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, true)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeRequestUriTooLong(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeRequestUriTooLong());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeRequestUriTooLong());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, true)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeUnsupportedMediaType(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeUnsupportedMediaType());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeUnsupportedMediaType());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, true)]
        [TestCase(HttpStatusCode.ExpectationFailed, false)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeRequestedRangeNotSatisfiable(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeRequestedRangeNotSatisfiable());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeRequestedRangeNotSatisfiable());
        }

        [TestCase(HttpStatusCode.Continue, false)]
        [TestCase(HttpStatusCode.SwitchingProtocols, false)]
        [TestCase(HttpStatusCode.OK, false)]
        [TestCase(HttpStatusCode.Created, false)]
        [TestCase(HttpStatusCode.Accepted, false)]
        [TestCase(HttpStatusCode.NonAuthoritativeInformation, false)]
        [TestCase(HttpStatusCode.NoContent, false)]
        [TestCase(HttpStatusCode.ResetContent, false)]
        [TestCase(HttpStatusCode.PartialContent, false)]
        [TestCase(HttpStatusCode.Ambiguous, false)]
        [TestCase(HttpStatusCode.MultipleChoices, false)]
        [TestCase(HttpStatusCode.Moved, false)]
        [TestCase(HttpStatusCode.MovedPermanently, false)]
        [TestCase(HttpStatusCode.Found, false)]
        [TestCase(HttpStatusCode.Redirect, false)]
        [TestCase(HttpStatusCode.RedirectMethod, false)]
        [TestCase(HttpStatusCode.SeeOther, false)]
        [TestCase(HttpStatusCode.NotModified, false)]
        [TestCase(HttpStatusCode.UseProxy, false)]
        [TestCase(HttpStatusCode.Unused, false)]
        [TestCase(HttpStatusCode.RedirectKeepVerb, false)]
        [TestCase(HttpStatusCode.TemporaryRedirect, false)]
        [TestCase(HttpStatusCode.BadRequest, false)]
        [TestCase(HttpStatusCode.Unauthorized, false)]
        [TestCase(HttpStatusCode.PaymentRequired, false)]
        [TestCase(HttpStatusCode.Forbidden, false)]
        [TestCase(HttpStatusCode.NotFound, false)]
        [TestCase(HttpStatusCode.MethodNotAllowed, false)]
        [TestCase(HttpStatusCode.NotAcceptable, false)]
        [TestCase(HttpStatusCode.ProxyAuthenticationRequired, false)]
        [TestCase(HttpStatusCode.RequestTimeout, false)]
        [TestCase(HttpStatusCode.Conflict, false)]
        [TestCase(HttpStatusCode.Gone, false)]
        [TestCase(HttpStatusCode.LengthRequired, false)]
        [TestCase(HttpStatusCode.PreconditionFailed, false)]
        [TestCase(HttpStatusCode.RequestEntityTooLarge, false)]
        [TestCase(HttpStatusCode.RequestUriTooLong, false)]
        [TestCase(HttpStatusCode.UnsupportedMediaType, false)]
        [TestCase(HttpStatusCode.RequestedRangeNotSatisfiable, false)]
        [TestCase(HttpStatusCode.ExpectationFailed, true)]
        //[TestCase(HttpStatusCode.UpgradeRequired, false, false)]
        [TestCase(HttpStatusCode.InternalServerError, false)]
        [TestCase(HttpStatusCode.NotImplemented, false)]
        [TestCase(HttpStatusCode.BadGateway, false)]
        [TestCase(HttpStatusCode.ServiceUnavailable, false)]
        [TestCase(HttpStatusCode.GatewayTimeout, false)]
        [TestCase(HttpStatusCode.HttpVersionNotSupported, false)]
        public void ShouldPassShouldBeExpectationFailed(HttpStatusCode status, bool shouldPass)
        {
            var response = new RestResponse { StatusCode = status };

            if (shouldPass)
                Assert.DoesNotThrow(() => response.ShouldBeExpectationFailed());
            else
                Assert.Throws<EqualException>(() => response.ShouldBeExpectationFailed());
        }
    }
}
